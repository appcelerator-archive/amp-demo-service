{"version":3,"sources":["app.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,MAAM,qBAAM,KAAN,CAAZ;AACA,IAAM,MAAM,wBAAZ;AACA,IAAM,OAAO,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAAjC;AACA,IAAM,YAAY,eAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,CAAlB;;kBAEe,G;;;;AAGf,IAAI,GAAJ,CAAQ,SAAR;;AAEA,IAAI,GAAJ,CAAQ,SAAR,EAAmB;AACjB,QAAM,kBAAI,IADO;AAEjB,WAAS,kBAAI;AAFI,CAAnB;;;AAMA,IAAI,GAAJ,CAAQ,oCAAR;AACA,IAAI,GAAJ,CAAQ,qBAAW,IAAX,EAAR;AACA,IAAI,GAAJ,CAAQ,qBAAW,UAAX,CAAsB;AAC5B,YAAU;AADkB,CAAtB,CAAR;;;AAKA,IAAI,SAAS,iCAAyB,GAAzB,CAAb;AACA,OAAO,IAAP,CAAY,SAAZ;AACA,IAAI,GAAJ,CAAQ,OAAO,MAAf;;;AAGA,IAAI,QAAQ,IAAR,KAAiB,MAArB,EAA6B;AAAA;AAC3B,QAAI,GAAJ,CAAQ,MAAR,EAAgB,IAAhB;AACA,QAAM,SAAS,IAAI,MAAJ,CAAW,IAAI,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAC/C,UAAI,6BAAJ,EAAmC,kBAAI,IAAvC,EAA6C,kBAAI,OAAjD,EAA0D,OAAO,OAAP,GAAiB,IAA3E;AACA,UAAI,GAAJ,CAAQ,QAAR,EAAkB,MAAlB;;;;AAIA,mBAAa,QAAb;;AAEA,mBAAa,SAAb;;AAEA,eAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC5B,gBAAQ,EAAR,CAAW,MAAX,EAAmB,YAAM;AACvB;AACA,iBAAO,KAAP,CAAa,YAAM;AACjB,gBAAI,gBAAJ;AACA,oBAAQ,IAAR;AACD,WAHD;AAID,SAND;AAOD;AACF,KAnBc,CAAf;AAF2B;AAsB5B","file":"app.js","sourcesContent":["import bodyParser from 'body-parser';\nimport debug from 'debug';\nimport { DirectoryRouteLoader } from 'atomiq';\nimport express from 'express';\nimport expressBunyanLogger from 'express-bunyan-logger';\nimport path from 'path';\nimport pkg from '../package.json';\n\nconst log = debug('app');\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst routesDir = path.join(__dirname, 'routes');\n\nexport default app;\n\n// provide express module to atomiq\napp.set('express', express);\n\napp.set('service', {\n  name: pkg.name,\n  version: pkg.version\n});\n\n// install middleware\napp.use(expressBunyanLogger());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\n\n// load routes\nlet loader = new DirectoryRouteLoader(app);\nloader.load(routesDir);\napp.use(loader.router);\n\n// start listening when this is the main node module\nif (require.main === module) {\n  app.set('port', port);\n  const server = app.listen(app.get('port'), () => {\n    log('%s v%s listening on port %s', pkg.name, pkg.version, server.address().port);\n    app.set('server', server);\n\n    // close server gracefully...\n    // handle ctrl-c\n    exitOnSignal('SIGINT');\n    // handle docker stop\n    exitOnSignal('SIGTERM');\n\n    function exitOnSignal(signal) {\n      process.on(signal, () => {\n        log(`$(signal) received, stopping server...`);\n        server.close(() => {\n          log('server stopped');\n          process.exit();\n        });\n      });\n    }\n  });\n}\n"]}